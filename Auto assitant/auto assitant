<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Job Application Assistant for Freshers</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .form-input, .form-textarea, .form-select {
            @apply w-full px-4 py-2 bg-gray-50 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors;
        }
        .btn {
            @apply px-6 py-2 rounded-lg font-semibold text-white transition-transform transform hover:scale-105 shadow-md hover:shadow-lg;
        }
        .btn-primary {
            @apply bg-blue-600 hover:bg-blue-700;
        }
        .btn-secondary {
            @apply bg-green-600 hover:bg-green-700;
        }
        .card {
            @apply bg-white border border-gray-200 rounded-xl shadow-sm hover:shadow-lg transition-shadow duration-300;
        }
        .skill-tag {
            @apply inline-flex items-center bg-blue-100 text-blue-800 text-sm font-medium mr-2 mb-2 px-2.5 py-1 rounded-full;
        }
        .skill-tag button {
            @apply ml-2 text-blue-600 hover:text-blue-800;
        }
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="container mx-auto p-4 md:p-8 max-w-6xl">
        <header class="text-center mb-8">
            <h1 class="text-4xl md:text-5xl font-bold text-gray-900">AI Job Assistant for Freshers</h1>
            <p class="mt-2 text-lg text-gray-600">Launch your career. Let AI find entry-level jobs and draft your applications.</p>
        </header>

        <main class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Left Column: User Details Form -->
            <div class="lg:col-span-1">
                <div class="bg-white p-6 rounded-xl shadow-md sticky top-8">
                    <h2 class="text-2xl font-bold mb-4 border-b pb-2">Your Profile</h2>
                    <form id="user-details-form" class="space-y-4">
                        <div>
                            <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                            <input type="text" id="name" name="name" class="form-input" placeholder="e.g., Alex Doe" required>
                        </div>
                        <div>
                            <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Your Email</label>
                            <input type="email" id="email" name="email" class="form-input" placeholder="e.g., alex.doe@example.com" required>
                        </div>
                         <div>
                            <label for="experience" class="block text-sm font-medium text-gray-700 mb-1">Years of Experience</label>
                            <input type="text" id="experience" name="experience" class="form-input" placeholder="e.g., 0 or Fresher" required value="Fresher">
                        </div>
                        <div>
                            <label for="qualifications" class="block text-sm font-medium text-gray-700 mb-1">Qualifications</label>
                            <textarea id="qualifications" name="qualifications" rows="3" class="form-textarea" placeholder="e.g., B.E. in Computer Engineering, 2024" required></textarea>
                        </div>
                         <div>
                            <label for="projects" class="block text-sm font-medium text-gray-700 mb-1">Academic/Personal Projects</label>
                            <textarea id="projects" name="projects" rows="4" class="form-textarea" placeholder="Describe 1-2 key projects, the tech used, and your role." required></textarea>
                        </div>
                         <div>
                            <label for="skills-input" class="block text-sm font-medium text-gray-700 mb-1">Skills (press Enter to add)</label>
                            <input type="text" id="skills-input" class="form-input" placeholder="e.g., Java, SQL, Git...">
                            <div id="skills-container" class="mt-2"></div>
                        </div>
                        <div>
                            <label for="resume" class="block text-sm font-medium text-gray-700 mb-1">Resume</label>
                            <input type="file" id="resume" name="resume" class="w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" required>
                            <span id="resume-file-name" class="text-xs text-gray-500 mt-1 block"></span>
                        </div>
                        <div>
                            <label for="job-role" class="block text-sm font-medium text-gray-700 mb-1">Desired Job Role</label>
                            <input type="text" id="job-role" name="job-role" class="form-input" placeholder="e.g., Graduate Engineer Trainee" required>
                        </div>
                         <div>
                            <label for="location" class="block text-sm font-medium text-gray-700 mb-1">Location</label>
                            <input type="text" id="location" name="location" class="form-input" placeholder="e.g., Bangalore or Remote" required>
                        </div>
                        <button type="submit" class="btn btn-primary w-full !mt-6">Find Entry-Level Jobs</button>
                    </form>
                </div>
            </div>

            <!-- Right Column: Job Listings -->
            <div class="lg:col-span-2">
                <div id="job-listings-container">
                    <div id="placeholder" class="text-center py-20 px-6 bg-white rounded-xl shadow-md">
                         <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                        <h3 class="mt-2 text-lg font-medium text-gray-900">Your job search starts here</h3>
                        <p class="mt-1 text-sm text-gray-500">Fill out your profile to let AI find opportunities for you.</p>
                    </div>
                    <div id="job-listings" class="hidden space-y-4"></div>
                    <div id="status-message" class="hidden text-center py-20 px-6 bg-white rounded-xl shadow-md"></div>
                </div>
            </div>
        </main>
    </div>

    <!-- Modal for showing generated emails -->
    <div id="email-modal" class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center p-4 hidden z-50">
        <div class="bg-white rounded-xl shadow-2xl w-full max-w-3xl max-h-[90vh] flex flex-col">
            <div class="p-6 border-b flex justify-between items-center">
                <h2 class="text-2xl font-bold">Generated Application Emails</h2>
                <button id="close-modal-btn" class="text-gray-400 hover:text-gray-600 text-3xl leading-none">&times;</button>
            </div>
            <div id="modal-content" class="p-6 overflow-y-auto"></div>
             <div class="p-4 bg-gray-50 border-t text-center">
                <p class="text-sm text-gray-600">Click "Send via Email Client" to open and send each email.</p>
            </div>
        </div>
    </div>

    <script>
        // --- Hardcoded API Key ---
        const API_KEY = 'AIzaSyDunuXQYMQn6Zx0VV_mQWwf3hq6evr2RgU';

        // --- DOM Elements ---
        const form = document.getElementById('user-details-form');
        const jobListingsContainer = document.getElementById('job-listings');
        const placeholder = document.getElementById('placeholder');
        const statusMessage = document.getElementById('status-message');
        const modal = document.getElementById('email-modal');
        const modalContent = document.getElementById('modal-content');
        const closeModalBtn = document.getElementById('close-modal-btn');
        const resumeInput = document.getElementById('resume');
        const resumeFileNameSpan = document.getElementById('resume-file-name');
        const skillsInput = document.getElementById('skills-input');
        const skillsContainer = document.getElementById('skills-container');

        let userDetails = {};
        let skills = [];
        let resumeFile = null;
        let jobResults = [];

        // --- Event Listeners ---
        resumeInput.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                resumeFile = e.target.files[0];
                resumeFileNameSpan.textContent = `File: ${resumeFile.name}`;
            } else {
                resumeFile = null;
                resumeFileNameSpan.textContent = '';
            }
        });
        
        skillsInput.addEventListener('keyup', (e) => {
            if (e.key === 'Enter' && skillsInput.value.trim() !== '') {
                e.preventDefault();
                addSkill(skillsInput.value.trim());
                skillsInput.value = '';
            }
        });

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            handleFindJobs();
        });

        closeModalBtn.addEventListener('click', () => modal.classList.add('hidden'));

        // --- Functions ---
        
        function addSkill(skill) {
            if (!skills.includes(skill)) {
                skills.push(skill);
                renderSkills();
            }
        }

        function removeSkill(skillToRemove) {
            skills = skills.filter(skill => skill !== skillToRemove);
            renderSkills();
        }

        function renderSkills() {
            skillsContainer.innerHTML = '';
            skills.forEach(skill => {
                const tag = document.createElement('div');
                tag.className = 'skill-tag';
                tag.innerHTML = `
                    <span>${skill}</span>
                    <button onclick="removeSkill('${skill}')" class="focus:outline-none">&times;</button>
                `;
                skillsContainer.appendChild(tag);
            });
        }

        function showStatus(message, isLoading = false) {
            placeholder.classList.add('hidden');
            jobListingsContainer.classList.add('hidden');
            statusMessage.classList.remove('hidden');
            let content = `<p>${message}</p>`;
            if (isLoading) {
                content = `<div class="flex flex-col items-center"><div class="loader"></div><p class="mt-4">${message}</p></div>`;
            }
            statusMessage.innerHTML = content;
        }
        
        async function handleFindJobs() {
            const formData = new FormData(form);
            userDetails = {
                name: formData.get('name'),
                email: formData.get('email'),
                experience: formData.get('experience'),
                qualifications: formData.get('qualifications'),
                projects: formData.get('projects'),
                jobRole: formData.get('job-role'),
                location: formData.get('location'),
                skills: skills
            };

            if (!resumeFile) {
                alert('Please upload your resume.');
                return;
            }

            showStatus('Finding relevant entry-level jobs using AI...', true);

            const prompt = `
                Based on the following user profile, find 5 entry-level or fresher job listings.
                - Experience Level: "${userDetails.experience}"
                - Desired Job Role: "${userDetails.jobRole}"
                - Target Location: "${userDetails.location}"
                - Key Skills: ${userDetails.skills.join(', ')}
                - Qualifications: ${userDetails.qualifications}

                For each job, provide the company name, a realistic job title suitable for a fresher, and a plausible hiring email address (like careers@company.com or freshers@company.com).
            `;

            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${API_KEY}`;
            
            const payload = {
                contents: [{ parts: [{ text: prompt }] }],
                generationConfig: {
                    responseMimeType: "application/json",
                    responseSchema: {
                        type: "ARRAY",
                        items: {
                            type: "OBJECT",
                            properties: {
                                "company": { "type": "STRING" },
                                "title": { "type": "STRING" },
                                "email": { "type": "STRING" },
                                "location": { "type": "STRING" }
                            },
                            required: ["company", "title", "email", "location"]
                        }
                    }
                }
            };

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    const errorBody = await response.json();
                    throw new Error(`API Error: ${errorBody.error.message || 'Unknown error'}`);
                }

                const data = await response.json();
                const jobsText = data.candidates[0].content.parts[0].text;
                jobResults = JSON.parse(jobsText);

                if (jobResults && jobResults.length > 0) {
                    displayJobs(jobResults);
                } else {
                    showStatus('AI could not find any jobs for this role and location. Please try a different search.');
                }

            } catch (error) {
                console.error('Error finding jobs:', error);
                showStatus(`An error occurred: ${error.message}. Please check your API key and try again.`);
            }
        }

        function displayJobs(jobs) {
            statusMessage.classList.add('hidden');
            jobListingsContainer.classList.remove('hidden');
            jobListingsContainer.innerHTML = ''; // Clear previous results

            jobs.forEach((job, index) => {
                const jobCard = `
                    <div class="card p-5">
                        <div class="flex items-start space-x-4">
                            <input type="checkbox" id="job-${index}" value='${JSON.stringify(job)}' class="h-5 w-5 mt-1 rounded border-gray-300 text-blue-600 focus:ring-blue-500" checked>
                            <label for="job-${index}" class="flex-1 cursor-pointer">
                                <div class="flex justify-between items-center">
                                    <h3 class="text-xl font-bold text-gray-900">${job.title}</h3>
                                    <span class="text-sm bg-blue-100 text-blue-800 px-2 py-1 rounded-full">${job.location}</span>
                                </div>
                                <p class="text-md text-gray-700">${job.company}</p>
                            </label>
                        </div>
                    </div>
                `;
                jobListingsContainer.innerHTML += jobCard;
            });

            jobListingsContainer.innerHTML += `
                <div class="text-center mt-6">
                    <button id="generate-emails-btn" class="btn btn-primary text-lg px-8 py-3">
                        🚀 Generate Application Emails
                    </button>
                </div>
            `;
            document.getElementById('generate-emails-btn').addEventListener('click', handleGenerateEmails);
        }

        async function handleGenerateEmails() {
            const selectedJobsCheckboxes = document.querySelectorAll('#job-listings input[type="checkbox"]:checked');
            if (selectedJobsCheckboxes.length === 0) {
                alert('Please select at least one job to apply for.');
                return;
            }

            const selectedJobs = Array.from(selectedJobsCheckboxes).map(cb => JSON.parse(cb.value));
            
            modal.classList.remove('hidden');
            modalContent.innerHTML = `<div class="flex flex-col items-center justify-center h-full"><div class="loader"></div><p class="mt-4 text-lg">Drafting application emails with AI...</p></div>`;

            try {
                const emailPromises = selectedJobs.map(job => generateEmailForJob(job));
                const generatedEmails = await Promise.all(emailPromises);
                modalContent.innerHTML = generatedEmails.join('');
            } catch (error) {
                console.error('Error generating emails:', error);
                modalContent.innerHTML = `<div class="text-red-600 bg-red-100 p-4 rounded-lg"><h3 class="font-bold">An Error Occurred</h3><p>${error.message}</p></div>`;
            }
        }

        async function generateEmailForJob(job) {
            const prompt = `
                My name is ${userDetails.name}. My contact email is ${userDetails.email}.
                I am a fresher with the following qualifications: ${userDetails.qualifications}.
                My top skills are: ${userDetails.skills.join(', ')}.
                I have worked on these notable projects: ${userDetails.projects}.
                I am applying for the entry-level position of "${job.title}" at ${job.company}.
                My resume is attached.

                Please write a professional and enthusiastic cover letter email for a fresher. Address it to the Hiring Manager at ${job.company}.
                Crucially, highlight my projects and skills to show my potential, since I do not have formal work experience.
                Keep it concise and under 200 words. Do not write a subject line.
                End with a professional closing, my name, and my contact email (${userDetails.email}).
            `;

            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${API_KEY}`;
            const payload = { contents: [{ parts: [{ text: prompt }] }] };

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                const errorBody = await response.json();
                throw new Error(`API Error: ${errorBody.error.message || 'Unknown error'}`);
            }

            const data = await response.json();
            const emailBodyText = data.candidates?.[0]?.content?.parts?.[0]?.text;
            if (!emailBodyText) {
                 throw new Error("Received an invalid response from the AI model.");
            }

            const emailBodyHtml = emailBodyText.replace(/\n/g, '<br>');
            const subject = encodeURIComponent(`Application for ${job.title} - ${userDetails.name}`);
            const body = encodeURIComponent(emailBodyText);
            const mailtoLink = `mailto:${job.email}?subject=${subject}&body=${body}`;

            return `
                <div class="mb-6 pb-6 border-b last:border-b-0">
                    <div class="flex justify-between items-center flex-wrap gap-2">
                        <div>
                            <h4 class="text-lg font-bold">To: ${job.email} (${job.company})</h4>
                            <h5 class="font-semibold mt-1">Subject: Application for ${job.title} Position</h5>
                        </div>
                        <a href="${mailtoLink}" target="_blank" class="btn btn-secondary text-sm">
                           ✉️ Send via Email Client
                        </a>
                    </div>
                    <div class="mt-4 p-4 bg-gray-100 rounded-lg text-gray-700 prose prose-sm max-w-none">
                        ${emailBodyHtml}
                    </div>
                </div>
            `;
        }
    </script>
</body>
</html>
